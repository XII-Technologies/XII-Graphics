#pragma once

#include <GraphicsFoundation/GraphicsFoundationDLL.h>

#include <GraphicsFoundation/Resources/BottomLevelAS.h>

/// \brief This describes the hit group binding mode used by the top level acceleration structure.
struct XII_GRAPHICSFOUNDATION_DLL xiiGALHitGroupBindingMode
{
  using StorageType = xiiUInt8;

  enum Enum : StorageType
  {
    PerGeometry = 0U,                 ///< Each geometry in every instance may use a unique hit shader group. In this mode, space is reserved for each geometry in every instance in the top level acceleration structure and uses the most memory.
    PerInstance,                      ///< Each instance may use a unique hit shader group. In this mode, one slot is reserved for each instance irrespective of how many geometries it contains, so it uses less memory.
    PerTopLevelAccelerationStructure, ///< All instances in each top level acceleration structure will use the same hit group. In this mode, a single slot is reserved for one hit group for each top level acceleration structure.
    UserDefined,                      ///< The user must specify the contribution to the hit group index, and only bind hit groups by index.

    ENUM_COUNT,

    Default = PerGeometry
  };
};

XII_DECLARE_REFLECTABLE_TYPE(XII_GRAPHICSFOUNDATION_DLL, xiiGALHitGroupBindingMode);

/// \brief This describes the top level acceleration state that was used in the last build.
struct XII_GRAPHICSFOUNDATION_DLL xiiGALTopLevelASBuildDescription : public xiiHashableStruct<xiiGALTopLevelASBuildDescription>
{
  XII_DECLARE_POD_TYPE();

  xiiUInt32                          m_uiInstanceCount                    = 0U;                                     ///< The number of instances. The default is 0.
  xiiUInt32                          m_uiHitGroupStride                   = 0U;                                     ///< The number of hit shader groups. The default is 0.
  xiiEnum<xiiGALHitGroupBindingMode> m_BindingMode                        = xiiGALHitGroupBindingMode::PerGeometry; ///< The hit group binding mode. The default is xiiGALHitGroupBindingMode::PerGeometry.
  xiiUInt32                          m_uiFirstContributionToHitGroupIndex = 0U;                                     ///< The first hit group location. The default is 0
  xiiUInt32                          m_uiLastContributionToHitGroupIndex  = 0U;                                     ///< The last hit group location. The default is 0.
};

/// \brief This describes the top level acceleration structure instance.
struct XII_GRAPHICSFOUNDATION_DLL xiiGALTopLevelASInstanceDescription : public xiiHashableStruct<xiiGALTopLevelASInstanceDescription>
{
  XII_DECLARE_POD_TYPE();

  xiiGALBottomLevelASHandle m_hBottomLevelAS;                     ///< Bottom level acceleration structure handle.
  xiiUInt32                 m_uiContributionToHitGroupIndex = 0U; ///< The index that corresponds to the one specified in the TLAS build instance contribution to the hit group index.
  xiiUInt32                 m_uiInstanceIndex               = 0U; ///< The autogenerated index of the instance.
};

/// \brief This describes the top level acceleration structure creation description.
struct XII_GRAPHICSFOUNDATION_DLL xiiGALTopLevelASCreationDescription : public xiiHashableStruct<xiiGALTopLevelASCreationDescription>
{
  XII_DECLARE_POD_TYPE();

  xiiStringView                             m_sName;                                                       ///< Resource name. The default is an empty string view.
  xiiUInt32                                 m_uiMaxInstanceCount     = 0U;                                 ///< The allocated size for the specified number of instances. The default is 0.
  xiiBitflags<xiiGALRayTracingBuildASFlags> m_Flags                  = xiiGALRayTracingBuildASFlags::None; ///< The ray tracing build flags. The default is None.
  xiiUInt64                                 m_uiCompactedSize        = 0U;                                 ///< The size returned when writing the TLAS compacted size, if the acceleration structure is going to be the target of a compacted copy command. The default is 0.
  xiiUInt64                                 m_uiImmediateContextMask = XII_BIT(0);                         ///< Defines which immediate contexts are allowed to execute commands that use this top level acceleration structure. The default is the main immediate context.
                                                                                                           ///< Only specify the bits that indicate those immediate contexts where the resource will be used, setting unnecessary bits will result in extra overhead.
};

/// \brief Interface that defines methods to manipulate a top level acceleration structure (TLAS) object.
class XII_GRAPHICSFOUNDATION_DLL xiiGALTopLevelAS : public xiiGALDeviceObject
{
  XII_ADD_DYNAMIC_REFLECTION(xiiGALTopLevelAS, xiiGALDeviceObject);

public:
  /// \brief This returns the creation description for this object.
  XII_NODISCARD const xiiGALTopLevelASCreationDescription& GetDescription() const;

  /// \brief This returns the instance description that can be used in the shader binding table.
  ///
  /// \param sName - The instance name that is specified in the xiiGALTLASBuildInstanceData.
  ///
  /// \return The top level acceleration structure instance description, see xiiGALTopLevelASInstanceDescription. If the instance does not exist, then the contribution to hit group index and instance index are set to xiiInvalidIndex.
  ///
  /// \note Access to the top level acceleration structure must be externally synchronized.
  XII_NODISCARD virtual xiiGALTopLevelASInstanceDescription GetInstanceDescription(xiiStringView sName) const = 0;

  /// \brief This returns the top level acceleration structure state after the last build or update operation.
  ///
  /// \return The top level acceleration structure build description, see xiiGALTopLevelASBuildDescription.
  ///
  /// \note Access to the top level acceleration structure must be externally synchronized.
  XII_NODISCARD virtual xiiGALTopLevelASBuildDescription GetBuildDescription() const = 0;

  /// \brief This returns the scratch buffer information for the current acceleration structure.
  ///
  /// \return The scratch buffer size description, see xiiGALScratchBufferSizeDescription.
  XII_NODISCARD virtual xiiGALScratchBufferSizeDescription GetScratchBufferSizeDescription() const = 0;

  /// \brief Sets the acceleration structure usage state.
  ///
  /// \note This method does not perform state transition, but resets the internal acceleration structure state to the given value.
  ///       This method should be used after the application finished manually managing the acceleration structure state and wants to hand over state management back to the engine.
  virtual void SetState(xiiBitflags<xiiGALResourceStateFlags> stateFlags) = 0;

  /// \brief Returns the internal acceleration structure state.
  XII_NODISCARD virtual xiiBitflags<xiiGALResourceStateFlags> GetState() const = 0;

protected:
  friend class xiiGALDevice;

  xiiGALTopLevelAS(xiiGALDevice* pDevice, const xiiGALTopLevelASCreationDescription& creationDescription);

  virtual ~xiiGALTopLevelAS();

  virtual xiiResult InitPlatform() = 0;

  virtual xiiResult DeInitPlatform() = 0;

protected:
  xiiGALTopLevelASCreationDescription m_Description;
};

#include <GraphicsFoundation/Resources/Implementation/TopLevelAS_inl.h>
